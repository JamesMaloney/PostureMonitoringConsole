<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cubemos.SkeletonTracking</name>
    </assembly>
    <members>
        <member name="T:Cubemos.Plugin">
            @addtogroup csharp_skeletontracking
            @{
            <summary>
            The enumeration for the available cubemos plugins
            </summary>
        </member>
        <member name="F:Cubemos.Plugin.CM_INTEL_PLUGIN">
            Intel inference engine plugin
        </member>
        <member name="F:Cubemos.Plugin.CM_UNIMPLEMENTED_PLUGIN">
            Not implemented
        </member>
        <member name="T:Cubemos.MemoryOrder">
            <summary>
            The enumeration for the order of the memory of the images. Fastest Moving Dimension is on the right
            </summary>
        </member>
        <member name="F:Cubemos.MemoryOrder.CM_HWC">
            Height-Width-Channel layout
        </member>
        <member name="F:Cubemos.MemoryOrder.CM_CWH">
            Channel-Width-Height layout
        </member>
        <member name="F:Cubemos.MemoryOrder.CM_CHW">
            Channel-Height-Width layout
        </member>
        <member name="T:Cubemos.ReturnCode">
            <summary>
            The enumeration for the available return codes from the cubemos framework
            </summary>
        </member>
        <member name="F:Cubemos.ReturnCode.CM_SUCCESS">
            Success
        </member>
        <member name="F:Cubemos.ReturnCode.CM_ERROR">
            Error
        </member>
        <member name="F:Cubemos.ReturnCode.CM_FILE_DOES_NOT_EXIST">
            File could not be read. Either the path is wrong or the file is corrupt.
        </member>
        <member name="F:Cubemos.ReturnCode.CM_INVALID_ARGUMENT">
            One or more input arguments are invalid
        </member>
        <member name="F:Cubemos.ReturnCode.CM_INVALID_ACTIVATION_KEY">
            Invalid activation key provided
        </member>
        <member name="F:Cubemos.ReturnCode.CM_TIMEOUT">
            Timeout during the function call
        </member>
        <member name="F:Cubemos.ReturnCode.CM_ACTIVATION_FAILED">
            API activation failed
        </member>
        <member name="F:Cubemos.ReturnCode.CM_CLOUD_TRACKING_UNAVAILABLE">
            Tracking on the cloud is unavailable
        </member>
        <member name="F:Cubemos.ReturnCode.CM_NOT_IMPLEMENTED">
            Not implemented
        </member>
        <member name="T:Cubemos.TargetComputeDevice">
            <summary>
            The enumeration for the target compute devices supported by the cubemos framework
            </summary>
        </member>
        <member name="F:Cubemos.TargetComputeDevice.CM_CPU">
            Intel CPU
        </member>
        <member name="F:Cubemos.TargetComputeDevice.CM_GPU">
            Intel GPU
        </member>
        <member name="F:Cubemos.TargetComputeDevice.CM_MYRIAD">
            Intel MYRIAD ASIC
        </member>
        <member name="T:Cubemos.LogLevel">
            <summary>
            The enumeration for the available logging levels in the cubemos framework
            </summary>
        </member>
        <member name="F:Cubemos.LogLevel.CM_LL_DEBUG">
            Most verbose mode, logs all messages including e.g. starting or stoping of methods
        </member>
        <member name="F:Cubemos.LogLevel.CM_LL_INFO">
            Includes important informations for the initialization stage and all error warning messages
        </member>
        <member name="F:Cubemos.LogLevel.CM_LL_WARNING">
            Only logs warnings and errors
        </member>
        <member name="F:Cubemos.LogLevel.CM_LL_ERROR">
            Errors are logged if normal processing is not possible
        </member>
        <member name="F:Cubemos.LogLevel.CM_LL_FATAL">
            Logs only critical messages. Even if no logging is initialized the fatal messages are logged to
            the console.
        </member>
        <member name="T:Cubemos.DataType">
            <summary>
            The enumeration for the available data types in the cubemos framework
            </summary>
        </member>
        <member name="F:Cubemos.DataType.CM_UINT8">
            Unsigned 8-bit integer values
        </member>
        <member name="F:Cubemos.DataType.CM_INT8">
            Signed 8-bit integer values
        </member>
        <member name="F:Cubemos.DataType.CM_UINT16">
            Unsigned 16-bit integer values
        </member>
        <member name="F:Cubemos.DataType.CM_INT16">
            Signed 16-bit integer values
        </member>
        <member name="F:Cubemos.DataType.CM_FLOAT16">
            16-bit floating point values
        </member>
        <member name="F:Cubemos.DataType.CM_FLOAT32">
            32-bit floating point values
        </member>
        <member name="F:Cubemos.DataType.CM_FLOAT64">
            64-bit floating point values
        </member>
        <member name="T:Cubemos.CM_Image">
            <summary>
            Thin wrapper for image data which is used as input for the inference calls
            </summary>
        </member>
        <member name="F:Cubemos.CM_Image.data">
            Pointer to the data buffer
        </member>
        <member name="F:Cubemos.CM_Image.dataType">
            Datatype for the data buffer enumerated from CUBEMOS_Datatype
        </member>
        <member name="F:Cubemos.CM_Image.nWidth">
            Width of the image data
        </member>
        <member name="F:Cubemos.CM_Image.nHeight">
            Height of the image data
        </member>
        <member name="F:Cubemos.CM_Image.nChannels">
            Number of channels of the data
        </member>
        <member name="F:Cubemos.CM_Image.nStride">
            Stride used for the image data
        </member>
        <member name="F:Cubemos.CM_Image.imageLayout">
            Memory layout of the image data enumerated from CUBEMOS_Memory_Order
        </member>
        <member name="T:Cubemos.CM_Buffer">
            <summary>
            The structure to hold the information of a data buffer used by the cubemos framework
            </summary>
        </member>
        <member name="F:Cubemos.CM_Buffer.fpBuffer">
            Pointer to the data buffer
        </member>
        <member name="F:Cubemos.CM_Buffer.nBufferSize">
            Size of the data buffer
        </member>
        <member name="F:Cubemos.CM_Buffer.nWidth">
            Width of the data buffer
        </member>
        <member name="F:Cubemos.CM_Buffer.nHeight">
            Height of the data buffer
        </member>
        <member name="F:Cubemos.CM_Buffer.nChannels">
            Number of channels in the data buffer
        </member>
        <member name="F:Cubemos.CM_Buffer.bufferLayout">
            Buffer memory layout as described in MemoryOrder
        </member>
        <member name="F:Cubemos.CM_Buffer.cLayerName">
            Name of the layer to which the data corresponds
        </member>
        <member name="T:Cubemos.CM_OutputBuffer">
            <summary>
            The structure to hold the information of the output data buffer used by the cubemos framework
            </summary>
        </member>
        <member name="F:Cubemos.CM_OutputBuffer.buffers">
            Pointer to the array of output data buffers
        </member>
        <member name="F:Cubemos.CM_OutputBuffer.nNumberOfOutputBuffers">
            Number of available output data buffers
        </member>
        <member name="T:Cubemos.Buffer">
            <summary>
            The structure to hold the managed data buffer in the C# bindings
            </summary>
        </member>
        <member name="F:Cubemos.Buffer.buffer">
            Storage order is defined by MemoryOrder
            Array of output data buffers
        </member>
        <member name="F:Cubemos.Buffer.layout">
            Memory layout is the order of the dimensions channel, image width and image height
        </member>
        <member name="F:Cubemos.Buffer.layername">
            Name of the layer to which the data corresponds
        </member>
        <member name="T:Cubemos.BaseSafeHandle">
            <summary>
            Base Class to wrap handles from C API in C# safely
            </summary>
        </member>
        <member name="T:Cubemos.BaseSafeHandle.DestroyHandle">
            <summary>
            Delegate to function responsible for destruction of a c handle
            </summary>
            <param name="handle">[in] C handle returned from C Api</param>
            <returns></returns>
        </member>
        <member name="F:Cubemos.BaseSafeHandle._destroyHandle">
            <summary>
            Defined by child class
            </summary>
        </member>
        <member name="M:Cubemos.BaseSafeHandle.#ctor(System.IntPtr,Cubemos.BaseSafeHandle.DestroyHandle)">
            <summary>
            API handle
            <param name="handle"> [in] pointer to the plugin handle </param>
            <param name="destroyHandle"> [in] Delegate to function responsible for destruction of a c handle </param>
            </summary>
        </member>
        <member name="P:Cubemos.BaseSafeHandle.IsInvalid">
            <summary>
            Checks if the handle is empty/not initialized
            </summary>
        </member>
        <member name="M:Cubemos.BaseSafeHandle.ReleaseHandle">
            <summary>
            Destroys the API handle and frees the internal buffers. It is called by garbage collector.
            </summary>
        </member>
        <member name="T:Cubemos.CM_SafeHandle">
            <summary>
            C# safe handle
            </summary>
        </member>
        <member name="M:Cubemos.CM_SafeHandle.#ctor(System.IntPtr)">
            <summary>
            API handle
            <param name="handle"> [in] pointer to the plugin handle </param>
            </summary>
        </member>
        <member name="T:Cubemos.CM_AsyncRequestHandle">
            <summary>
            C# safe async inference request handle
            </summary>
        </member>
        <member name="M:Cubemos.CM_AsyncRequestHandle.#ctor(System.IntPtr)">
            <summary>
            API handle
            <param name="asyncHandle"> [in] pointer to the async request handle </param>
            </summary>
        </member>
        <member name="T:Cubemos.ConversionMethods">
            @cond INTERNAL
            <summary>
            Memory handling methods for layout reordering and buffer copying
            </summary>
        </member>
        <member name="M:Cubemos.ConversionMethods.CopyToManaged(Cubemos.CM_Buffer)">
            Copies the cubemos buffer to a managed memory buffer
            <param name="buffer"> buffer [in] buffer containing data as floats </param>
        </member>
        <member name="T:Cubemos.NativeMethods">
            @cond INTERNAL
            <summary>
            cubemos Api methods
            </summary>
        </member>
        <member name="T:Cubemos.Exception">
            <summary>
            General error class
            </summary>
        </member>
        <member name="T:Cubemos.ErrorHandler">
            <summary>
            Error handling for API return codes.
            </summary>
        </member>
        <member name="M:Cubemos.ErrorHandler.Handle(Cubemos.ReturnCode)">
            <summary>
            Error handle </summary>
            <param name="returnCode"> [in] cubemos return code to handle </param>
        </member>
        <member name="T:Cubemos.ImageDataWrapper">
            <summary>
            CM_Image buffer wrapper to be used for inference with cubemos API
            </summary>
        </member>
        <member name="F:Cubemos.ImageDataWrapper.cubemosImage">
            cubemos CM_Image data
        </member>
        <member name="M:Cubemos.ImageDataWrapper.#ctor(System.Drawing.Bitmap)">
            <summary>
            CM_Image buffer constructed from an image bitmap </summary>
            <param name="bitmap"> [in] RGB or 8bit Grayscale image in HWC layout </param>
        </member>
        <member name="M:Cubemos.ImageDataWrapper.#ctor(System.IntPtr,System.Int32,System.Int32,System.Int32)">
             <summary>
             Image buffer constructed from a byte array </summary>
             <param name="data"> [in] RGB or 8bit Grayscale image in HWC layout </param>
             <param name="width"> [in] image width in pixel (number of columns) </param>
             <param name="height"> [in] image height in pixel (number of rows) </param>
             <param name="channels"> [in] number of channels </param>
            
        </member>
        <member name="M:Cubemos.ImageDataWrapper.Dispose">
            Triggers image data wrapper disposal
        </member>
        <member name="T:Cubemos.DisposableApi`1">
            @endcond
            <summary>
            Base Class to ensure correct dispose of managed handles
            </summary>
        </member>
        <member name="F:Cubemos.DisposableApi`1.Handle">
            <summary>
            Handle of a Child class of BaseSafeHandle
            </summary>
        </member>
        <member name="F:Cubemos.DisposableApi`1.Disposed">
            <summary>
            Used to determine if Dispose() has already been called
            </summary>
        </member>
        <member name="M:Cubemos.DisposableApi`1.Dispose">
            <summary>
            Dispose the Managed handle
            </summary>
        </member>
        <member name="T:Cubemos.Api">
            <summary>
            The class to wrap the function calls to the cubemos framework
            </summary>
        </member>
        <member name="M:Cubemos.Api.#ctor(Cubemos.Plugin,System.String,System.String)">
            <summary>
            The constructor to initialise the cubemos framework with the desired cubemos plugin </summary>
            <param name="plugin"> [in] The desired cubemos plugin </param>
            <param name="licenseKeyFile"> [in] Path to a valid license key file</param>
            <param name="activationKeyFile"> [in] Path where the activation key is stored. If it is not present, it will be generated during first use</param>
        </member>
        <member name="M:Cubemos.Api.CreateAsyncRequestHandle">
            <summary>
            Create and initialise a handle for performing an async inference request.
            The same request can be used to perform inference in a loop
            </summary>
            <returns> The initialised CMAsyncRequestHandle which can be used to perform
                      async inference and to wait on the result
            </returns>
        </member>
        <member name="M:Cubemos.Api.InitialiseLogging(Cubemos.LogLevel,System.Boolean,System.String)">
            <summary>
            Initial logging setup that should be called at the startup once </summary>
            <param name="loggingLevel"> [in] logging level specifies what messages are logged, levels are
            inclusive: if debug is set then all messages are logged, if error, then only error and fatal are
            logged </param>
            <param name="bWriteToConsole"> [in] logs are written to the standard console output </param>
            <param name="logFolder"> [in] path to the log folder. If the folder does not exist it will be created.
            If left empty no file logs will be created. </param>
        </member>
        <member name="M:Cubemos.Api.LoadModel(Cubemos.TargetComputeDevice,System.String)">
            <summary>
            Load the required DNN model on to the target compute device </summary>
            <param name="device"> [in] The target compute device onto which the DNN model shall be loaded </param>
            <param name="pathToDNNModel"> [in] The path to the requred DNN model </param>
        </member>
        <member name="M:Cubemos.Api.InferResults(System.Drawing.Bitmap,Cubemos.Buffer[]@)">
            <summary>
            Inference results from the input image which is readable by the loaded DNN model </summary>
            <param name="inputImage"> [in] The input image on which the inference has to be requested </param>
            <param name="buffers"> [out] The output buffer which is initialised with the results of the
            inference request </param>
        </member>
        <member name="M:Cubemos.Api.RequestInference(System.Drawing.Bitmap@,Cubemos.CM_AsyncRequestHandle@)">
             <summary>
             Request inference on the input image which is readable by the loaded DNN model </summary>
             <param name="bitmap"> [in] The input image on which the inference has to be requested </param>
             <param name="asyncRequestHandle"> [in] A valid handle to manage the async inference request </param>
            
        </member>
        <member name="M:Cubemos.Api.WaitForResult(Cubemos.CM_AsyncRequestHandle@,System.Int32,Cubemos.Buffer[]@)">
            <summary>
            C# managed call to get the result of the inferences into the output buffer </summary>
            <param name="asyncRequestHandle">[in] handle previously generated by calling CreateAsyncRequestHandle </param>
            <param name="timeout"> [in] The timeout value up to which the function shall block the thread to
            wait for results. Currently not used. </param>
            <param name="buffers"> [out] The output buffer which is initialised with the results of the
            inference request </param>
        </member>
        <member name="M:Cubemos.Api.WaitForResultNative(Cubemos.CM_AsyncRequestHandle,System.Int32,Cubemos.CM_OutputBuffer@)">
            <summary>
            Unmanaged call to get the result of the inferences into the output buffer </summary>
            <param name="asyncRequestHandle">[in] handle previously generated by calling CreateAsyncRequestHandle</param>
            <param name="timeout"> [in] The timeout value up to which the function shall block the thread to
            wait for results. Currently not used. </param>
            <param name="nativeOutputBuffer"> [out] The output buffer
            which is initialised with the results of the inference request </param>
        </member>
        <member name="M:Cubemos.Api.ReleaseOutputBuffer(Cubemos.CM_OutputBuffer@)">
            <summary>
            Unmanaged call to release the memory of the output buffer </summary>
            <param name="nativeOutputBuffer"> [in] The buffer to be released </param>
        </member>
        <member name="M:Cubemos.Api.DisposeAsyncRequestHandle(Cubemos.CM_AsyncRequestHandle@)">
            <summary>
            Dispose the cubemos async request handle
            </summary>
        </member>
        <member name="T:Cubemos.SkeletonTracking.CM_SKEL_KeypointsBuffer">
            @ingroup csharp_skeletontracking
            @{
            @cond INTERNAL
            <summary>
            Structure for a single skeleton buffer
            </summary>
        </member>
        <member name="F:Cubemos.SkeletonTracking.CM_SKEL_KeypointsBuffer.id">
            Persistent tracking id
        </member>
        <member name="F:Cubemos.SkeletonTracking.CM_SKEL_KeypointsBuffer.id_confirmed_on_cloud">
            If the id was also confirmed by the cloud based tracking
        </member>
        <member name="F:Cubemos.SkeletonTracking.CM_SKEL_KeypointsBuffer.numKeyPoints">
            Number of keypoints (joints)
        </member>
        <member name="F:Cubemos.SkeletonTracking.CM_SKEL_KeypointsBuffer.keypoints_coord_x">
            x in image coordinates
        </member>
        <member name="F:Cubemos.SkeletonTracking.CM_SKEL_KeypointsBuffer.keypoints_coord_y">
            y in image coordinates
        </member>
        <member name="F:Cubemos.SkeletonTracking.CM_SKEL_KeypointsBuffer.confidences">
            confidences
        </member>
        <member name="T:Cubemos.SkeletonTracking.CM_SKEL_Buffer">
            <summary>
            Structure for the Skeleton Tracking Results containing one or multiple skeletons
            </summary>
        </member>
        <member name="F:Cubemos.SkeletonTracking.CM_SKEL_Buffer.skeletons">
            Pointer to the skeletons buffer
        </member>
        <member name="F:Cubemos.SkeletonTracking.CM_SKEL_Buffer.numSkeletons">
            Number of detected skeletons
        </member>
        <member name="T:Cubemos.SkeletonTracking.CM_SKEL_TrackingSimilarityMetric">
            <summary>
            Posible flags to use for the creation of the tracking pipeline
            </summary>
        </member>
        <member name="F:Cubemos.SkeletonTracking.CM_SKEL_TrackingSimilarityMetric.CM_IOU">
            Integer over union
        </member>
        <member name="T:Cubemos.SkeletonTracking.CM_SKEL_TrackingMethod">
            <summary>
            Method used for tracking
            </summary>
        </member>
        <member name="F:Cubemos.SkeletonTracking.CM_SKEL_TrackingMethod.CM_TRACKING_FULLBODY_EDGE">
            Fullbody tracking on the edge (host-PC)
        </member>
        <member name="F:Cubemos.SkeletonTracking.CM_SKEL_TrackingMethod.CM_TRACKING_FULLBODY_CLOUD">
            Use tracking on the cloud with enhanced fullbody based reidentification
        </member>
        <member name="T:Cubemos.SkeletonTracking.CM_SafeSkeletonTrackingHandle">
            <summary>
            Wrapper for the C-Api CUBEMOS_SKEL_Handle
            </summary>
        </member>
        <member name="M:Cubemos.SkeletonTracking.CM_SafeSkeletonTrackingHandle.#ctor(System.IntPtr)">
            <summary>
            API handle
            <param name="handle"> [in] pointer to the plugin handle </param>
            </summary>
        </member>
        <member name="T:Cubemos.SkeletonTracking.CM_SkeletonTrackingAsyncRequestHandle">
            <summary>
            cubemos skeleton tracking async request handle
            </summary>
        </member>
        <member name="M:Cubemos.SkeletonTracking.CM_SkeletonTrackingAsyncRequestHandle.#ctor(System.IntPtr)">
            <summary>
            API handle
            <param name="handle"> [in] pointer to the async request handle </param>
            </summary>
        </member>
        <member name="T:Cubemos.SkeletonTracking.CM_SKEL_TrackingContextHandle">
            <summary>
            cubemos skeleton tracking pipeline handle
            </summary>
        </member>
        <member name="M:Cubemos.SkeletonTracking.CM_SKEL_TrackingContextHandle.#ctor(System.IntPtr)">
            <summary>
            API handle
            <param name="handle"> [in] pointer to the async request handle </param>
            </summary>
        </member>
        <member name="T:Cubemos.SkeletonTracking.SkeletonTrackingNativeMethods">
            <summary>
            Skeleton Tracking API Methods available to the outside
            </summary>
        </member>
        <member name="T:Cubemos.SkeletonTracking.Api">
            @endcond
            <summary>
            C# Skeleton Tracking Wrapper Class
            </summary>
        </member>
        <member name="F:Cubemos.SkeletonTracking.Api.trackingHistorySkelBuffers">
            <summary>
            Structure to store the previous tracking results per pipeline
            </summary>
        </member>
        <member name="T:Cubemos.SkeletonTracking.Api.TrackingOptions">
            <summary>
            Options to initialize the TrackingContext.
            </summary>
        </member>
        <member name="F:Cubemos.SkeletonTracking.Api.TrackingOptions.trackingMetric">
            The metric to use for tracking. Currently only intersection over union (CM_IOU) is supported.
        </member>
        <member name="F:Cubemos.SkeletonTracking.Api.TrackingOptions.maxFramesIdKeepalive">
            The maximum number of frames allowed before an id gets deleted. 
            A person not detected for more frames, will be assigned a new id the next time he/she will be detected.
        </member>
        <member name="F:Cubemos.SkeletonTracking.Api.TrackingOptions.trackingMethod">
            If set to a value other than CM_TRACKING_FULLBODY_EDGE, tracking is enhanced with calls to cubemos cloud based reidentification API.
            For further details see https://www.cubemos.com/skeleton-tracking-sdk
        </member>
        <member name="F:Cubemos.SkeletonTracking.Api.TrackingOptions.apiKey">
            The api key is needed for authentication during cloud based tracking.
            Please contact meet@cubemos.com if you need information about payment plans.
        </member>
        <member name="F:Cubemos.SkeletonTracking.Api.TrackingOptions.minKeypointConfidence">
            Similar to the parameter min_body_percentage_visible.This parameter controls the minimum confidence for a keypoint to be defined
            visible
        </member>
        <member name="F:Cubemos.SkeletonTracking.Api.TrackingOptions.minBodyPercentageVisible">
            The percentage of keypoints that have to be visible in order to perform online reidentification.
            Increasing this value will ususally result in better identification rates but reduces the number of times identification will actually be performed.
            If in your usecase people are usually truncated because they are very close to the camera, choose a lower value. If you expect that people are always in full view,
            you can even consider a higher value
        </member>
        <member name="F:Cubemos.SkeletonTracking.Api.TrackingOptions.numTeachInPerPerson">
            When a person is first seen during online tracking a "teach-in" is performed so that the person will be recognized in future
            identification attempts. Multiple consecutive "teach-ins" increase the chance of reidentification. However if there is a lot of movement during the teach-in phase
            it might happen that the (offline) tracking id switches.
        </member>
        <member name="F:Cubemos.SkeletonTracking.Api.TrackingOptions.forceCloudTrackingEveryXFrames">
            Usually re-identification based cloud tracking is only performed when certain requirements from offline tracking are fullfiled (e.g a new person is detected).
            By setting a value > 0 you can force cloud tracking for every "value" frames.
            If you set the value to 1, tracking on the edge is completely disabled since cloud tracking is done every frame.
        </member>
        <member name="T:Cubemos.SkeletonTracking.Api.Coordinate">
            <summary>
            2D Coordinate
            </summary>
        </member>
        <member name="F:Cubemos.SkeletonTracking.Api.Coordinate.x">
            <summary>
            X coordinate
            </summary>
        </member>
        <member name="F:Cubemos.SkeletonTracking.Api.Coordinate.y">
            <summary>
            y coordinate
            </summary>
        </member>
        <member name="M:Cubemos.SkeletonTracking.Api.Coordinate.#ctor(System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="dXIn"></param>
            <param name="dYIn"></param>
        </member>
        <member name="T:Cubemos.SkeletonTracking.Api.SkeletonKeypoints">
            <summary>
            Structure to store the list of the coordinates of the Skeleton Keypoints
            </summary>
        </member>
        <member name="F:Cubemos.SkeletonTracking.Api.SkeletonKeypoints.listJoints">
            <summary>
            List of keypoint coordinates in 2D
            </summary>
        </member>
        <member name="F:Cubemos.SkeletonTracking.Api.SkeletonKeypoints.listConfidences">
            <summary>
            List of keypoint confidences
            </summary>
        </member>
        <member name="F:Cubemos.SkeletonTracking.Api.SkeletonKeypoints.id">
            <summary>
            Skeleton tracking id
            </summary>
        </member>
        <member name="M:Cubemos.SkeletonTracking.Api.#ctor(System.String,Cubemos.SkeletonTracking.Api.TrackingOptions)">
            <summary>
            Constructor of the Skeleton Tracking binding class with an api handle. The Skeleton Tracking API relies on the cubemos Api to load the model and initialize inference pipeline. </summary>
            <param name = "activationKeyFolder"> [in] The path to the folder containing the activation key file. </param>
            /// <param name = "trackingOptions"> [in] Optional options controlling the tracking. If left empty, default parameters are used. </param>
        </member>
        <member name="M:Cubemos.SkeletonTracking.Api.LoadModel(Cubemos.TargetComputeDevice,System.String)">
            <summary>
            Load the required DNN model on to the target compute device </summary>
            <param name="device"> [in] The target compute device onto which the DNN model shall be loaded </param>
            <param name="pathToDNNModel"> [in] The path to the requred DNN model </param>
        </member>
        <member name="M:Cubemos.SkeletonTracking.Api.CreateAsyncRequestHandle">
            <summary>
            Create and initialise a handle for performing an async inference request.
            The same request can be used to perform inference in a loop
            </summary>
            <returns> The initialised CM_AsyncRequestHandle which can be used to perform
                      async inference and to wait on the result
            </returns>
        </member>
        <member name="M:Cubemos.SkeletonTracking.Api.RunSkeletonTracking(System.Drawing.Bitmap@,System.Int32,System.Collections.Generic.List{Cubemos.SkeletonTracking.Api.SkeletonKeypoints}@,System.Int32)">
            <summary>
            Run inference on the given input image </summary>
            <param name="inputImage"> [in] The input 3 channel BGR image as a bitmap with pixel format of Format24bppRgb </param>
            <param name="nNetworkHeight"> [in] The desired height of the input blob with which the DNN model
            should infer the results </param>
            <param name="skeletons"> [out] The tracked skeletons for this image </param>
            <param name="pipelineID"> [in] The identifier of the video sequence used to maintain the queue containing previous tracking results.
            If 0 or missing no tracking history is kept and the skeletons ids are not tracked between frames. </param>
        </member>
        <member name="M:Cubemos.SkeletonTracking.Api.RunSkeletonTracking(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.List{Cubemos.SkeletonTracking.Api.SkeletonKeypoints}@,System.Int32)">
            <summary>
            Run inference on the given input image </summary>
            <param name="inputImage"> [in] The input 3 channel BGR image as bytes buffer with pixel format of Format24bppRgb </param>
            <param name="imageWidth"> [in] number of columns </param>
            <param name="imageHeight"> [in] number of rows </param>
            <param name="imageChannels"> [in] number of channels </param>
            <param name="nNetworkHeight"> [in] The desired height of the input blob with which the DNN model
            should infer the results </param>
            <param name="skeletons"> [out] The tracked skeletons for this image </param>
            <param name="pipelineID"> [in] The identifier of the video sequence used to maintain the queue containing previous tracking results.
            If 0 or missing no tracking history is kept and the skeletons ids are not tracked between frames. </param>
        </member>
        <member name="M:Cubemos.SkeletonTracking.Api.RunSkeletonTracking(Cubemos.ImageDataWrapper,System.Int32,System.Collections.Generic.List{Cubemos.SkeletonTracking.Api.SkeletonKeypoints}@,System.Int32,System.Boolean)">
            <summary>
            Run inference on the given input image </summary>
            <param name="imgWrapper"> [in] The input 3 channel BGR image with bitdepth of 8 bits per channel </param>
            <param name="nNetworkHeight"> [in] The desired height of the input blob with which the DNN model
            should infer the results </param>
            <param name="skeletons"> [out] The tracked skeletons for this image </param>
            <param name="pipelineID"> [in] The identifier of the video sequence used to maintain the queue containing previous tracking results.
            If 0 or missing no tracking history is kept and the skeletons ids are not tracked between frames. </param>
            <param name="forceCloudTracking"> [in]If set to true, re-identification based cloud tracking will be performed regardless of the status of the offline tracking.
            Should be used with caution. Cloud tracking for every frame will lead to high latency and use your API quota for the same. Default is "false".</param>
        </member>
        <member name="M:Cubemos.SkeletonTracking.Api.ClearTrackingHistory(System.Int32)">
            <summary>
            Clears tracking history for a given pipeline </summary>
            <param name="pipelineID"> [in] unique id of the video sequence or acquisition pipeline </param>
        </member>
        <member name="M:Cubemos.SkeletonTracking.Api.StartSkeletonTrackingAsync(System.Drawing.Bitmap@,System.Int32,Cubemos.SkeletonTracking.CM_SkeletonTrackingAsyncRequestHandle,System.Int32)">
             <summary>
             Request inference on the input image which is readable by the loaded DNN model </summary>
             <param name="inputImage"> [in] The input image on which the inference has to be requested </param>
             <param name="nNetworkHeight"> [in] The network height to use when calling on the inference</param>
             <param name="asyncRequestHandle"> [in] A valid handle to manage the async inference request </param>
             <param name="pipelineID"> [in] The identifier of the video sequence used to maintain the queue containing previous tracking results.
             If 0 or missing no tracking history is kept and the skeletons ids are not tracked between frames. </param>
            
        </member>
        <member name="M:Cubemos.SkeletonTracking.Api.WaitForSkeletonResults(Cubemos.SkeletonTracking.CM_SkeletonTrackingAsyncRequestHandle,System.Int32,System.Collections.Generic.List{Cubemos.SkeletonTracking.Api.SkeletonKeypoints}@,System.Int32)">
            <summary>
            C# managed call to get the result of the inferences into the output buffer </summary>
            <param name="asyncRequestHandle"> [in] The async request handle with which the inference request was made
            </param> <param name="timeout"> [in] The timeout value up to which the function shall block the thread to
            wait for results. Currently not used. </param>
            <param name="skeletons"> [out] The output buffer which is initialised with the results of the
            inference request </param>
            <param name="pipelineID"> [in] The identifier of the video sequence used to maintain the queue containing previous tracking results.
            If 0 or missing no tracking history is kept and the skeletons ids are not tracked between frames. </param>
        </member>
        <member name="M:Cubemos.SkeletonTracking.Api.WaitForSkeletonResultsAndTrack(System.Drawing.Bitmap@,Cubemos.SkeletonTracking.CM_SkeletonTrackingAsyncRequestHandle,System.Int32,System.Collections.Generic.List{Cubemos.SkeletonTracking.Api.SkeletonKeypoints}@,System.Int32,System.Boolean)">
            <summary>
            C# managed call to get the result of the inferences into the output buffer </summary>
            <param name="asyncRequestHandle"> [in] The async request handle with which the inference request was made
            </param> <param name="timeout"> [in] The timeout value up to which the function shall block the thread to
            wait for results. Currently not used. </param>
            <param name="skeletons"> [out] The output buffer which is initialised with the results of the
            inference request </param>
            <param name="pipelineID"> [in] The identifier of the video sequence used to maintain the queue containing previous tracking results.
            If 0 or missing no tracking history is kept and the skeletons ids are not tracked between frames. </param>
        </member>
        <member name="M:Cubemos.SkeletonTracking.Api.DisposeAsyncRequestHandle(Cubemos.SkeletonTracking.CM_SkeletonTrackingAsyncRequestHandle@)">
            <summary>
            Dispose the cubemos skeleton tracking async request handle
            </summary>
            <param name="asyncRequestHandle"> [in] The async request handle with which the inference request was made
            </param>
        </member>
    </members>
</doc>
